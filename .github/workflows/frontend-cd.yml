name: Frontend Continuous Deployment

on:
  push:
     branches:
       - main
     paths:
       - 'starter/frontend/**'
  workflow_dispatch:  # Allow manual triggering
  pull_request:
    
    branches:
      - main

jobs:
  Linting:
    
    runs-on: ubuntu-latest
    environment: Devlopmnet Environment

    steps:
    - name: Check the Repository
      uses: actions/checkout@v3

    - name: Use Node.js 18
      uses: actions/setup-node@v3
      with:
        node-version: 18
        cache: 'npm'
        cache-dependency-path: starter/frontend/package-lock.json

    - name: Install Dependencies
      working-directory: starter/frontend
      run: npm ci

    - name: Checkout Run Lint
      run: cd starter/frontend && npm run lint

  Test:
    
    runs-on: ubuntu-latest

    steps:
    - name: Check the Repository
      uses: actions/checkout@v3

    - name: Use Node.js 18
      uses: actions/setup-node@v3
      with:
        node-version: 18
        cache: 'npm'
        cache-dependency-path: starter/frontend/package-lock.json
        
    - name: Install Dependencies
      working-directory: starter/frontend
      run: npm ci
  
    - name: Test
      run: cd starter/frontend && npm run test



  Build:
    needs: [Linting, Test]
    runs-on: ubuntu-latest
    environment: Devlopmnet Environment
    steps:
    - name: Check the Repository
      uses: actions/checkout@v3
    
    - name: Use Node.js 18
      uses: actions/setup-node@v3
      with:
        node-version: 18
        cache: 'npm'
        cache-dependency-path: starter/frontend/package-lock.json

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v3
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
  

    - name: Login to Amazon 
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2



    - name: Build and Push Docker Image
      working-directory: starter/frontend
      env:
        IMAGE_TAG: latest
        REPO_NAME: frontend
      run: |
        docker build --build-arg=REACT_APP_MOVIE_API_URL=http://movies-1623247003.us-east-1.elb.amazonaws.com --tag 294538121822.dkr.ecr.us-east-1.amazonaws.com/$REPO_NAME:$IMAGE_TAG .
        docker push 294538121822.dkr.ecr.us-east-1.amazonaws.com/$REPO_NAME:$IMAGE_TAG
    

    - name: Configure Kubeconfig
      env:
        CLUSTER_NAME: cluster
      run: |
        curl -o aws-iam-authenticator https://amazon-eks.s3.us-west-2.amazonaws.com/1.21.2/2021-07-05/bin/linux/amd64/aws-iam-authenticator
        chmod +x ./aws-iam-authenticator
        sudo mv aws-iam-authenticator /usr/local/bin
        aws eks get-token --cluster-name $CLUSTER_NAME --region us-east-1 > /tmp/token
        aws eks update-kubeconfig --name $CLUSTER_NAME --region us-east-1
        
    - name: Verify EKS Cluster Access
      run: |
        kubectl get nodes
  

    - name: Deploy Docker Image to Amazon EKS
      working-directory: starter/frontend/k8s
      env:
        IMAGE_TAG: latest
        REPO_NAME: frontend
        KUBECONFIG: /tmp/kubeconfig
      run: |
        kustomize edit set image frontend=294538121822.dkr.ecr.us-east-1.amazonaws.com/$REPO_NAME:$IMAGE_TAG
        kustomize build | kubectl apply -f - --token=$(cat /tmp/token)